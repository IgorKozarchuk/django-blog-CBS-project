________________________________________

Django MTV (Model-Template-View) pattern:

* views.py determines what content is displayed on a given
page.
* urls.py determines where that content is going.
* model.py contains the content from the database.
* template provides styling (html) for it.

________________________________________


1. Create virtual environment:

	py -m venv myvenv


2. Activate virtual environment:

 - cmd:
	myvenv\Scripts\activate

 - PowerShell:
	myvenv\Scripts\Activate


2.1 To deactivate virtual environment:

	deactivate


3. Install Django using pip while being in virtual environment:

	pip install django


4. Create project:

	django-admin startproject myproject .

NOTE: running the command with the period (.) at the end says, install in the current directory.


5. Run server:

	py manage.py runserver

By default runs at http://127.0.0.1:8000/
General syntax:
	py manage.py runserver [IP]:[PORT]
	(example: 127.0.0.1:80)

NOTE: If server is run without virtual environment - Python was not found ERROR.
Solution: On Windows, go to "Start", type "Manage App Execution Aliases". Go to it and turn off all "python.exe" app installers.
https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store


6. Create app:

	py manage.py startapp myapp


7. Add app to myproject/settings.py:

	INSTALLED_APPS = [
		#...
		'myapp'
	]


8. Update myproject/urls.py:

	from django.contrib import admin
	from django.urls import path, include

	urlpatterns = [
		path('myapp/', include('myapp.urls')),
		path('admin/', admin.site.urls),
	]


9. Modify myapp/views.py:

	from django.shortcuts import render

	def index(request):
		return render(request, "index.html", {})


10. Add a template (myapp/templates/myapp/index.html).


11. Create myapp/urls.py:

	from django.urls import path
	from . import views

	urlpatterns = [
		path("", views.index, name="index")
	]


12. Define models (myapp/models.py):

	from django.db import models

	class Person(models.Model):
		f_name = models.Charfield(max_length=30)
		l_name = models.Charfield(max_length=30)


12.1 Create objects (myapp/views.py):
	
	from myapp.models import Person
	
	p = Person(f_name="John", l_name="Doe")
	p.save()


13. Make migrations to database:

	py manage.py makemigrations myapp
	py manage.py migrate

NOTE: you donâ€™t have to include a name after makemigrations. If you simply run "py manage.py makemigrations", a migrations file will be created for all available changes throughout the Django project.


13.1 To clear database:

	py manage.py flush


13.2 To delete a table:

	1) install sqlite3 and add it to PATH
	2) in terminal, run command:
		py manage.py dbshell
	3) list all tables (optionally):
		sqlite> .table
	4) delete table my_table:
		sqlite> DROP TABLE my_table;
	5) https://stackoverflow.com/questions/34548768/no-such-table-exception
		py manage.py migrate --run-syncdb

14. Create forms (myapp/forms.py):

	from django import forms

	class NameForm(forms.Form):
		yout_name = forms.CharField(label="Your name", max_length=100)


15. Import forms in myapp/views.py:

	from django.shortcuts import render
	from .forms import NameForm
	
	def get_name(request):
		if request.method == "POST":
			form = NameForm(request.POST)
			if form.is_valid():
				# ... process the data in form.cleaned_data as required
		else:
			form = NameForm()
		return render(request, "myapp/name.html", {"form": form})


16. Create form template (myapp/templates/myapp/name.html):

	<form action="/your-name/" method="post">
		{% csrf_token %}
		{{ form }}
		<input type="submit" value="Submit">
	</form>


17. Admin:

17.1 Initiate database (if not initiated):

	py manage.py migrate

17.2 Create superuser:

	py manage.py createsuperuser

Enter username, e-mail (optional) and password.
If superuser is already created, skip this step.

17.3 Start server:

	py manage.py runserver

17.4 Navigate to:

	http://127.0.0.1:8000/admin/

Enter username and password.

17.5 Register models in myapp/admin.py:

	from myapp.models import *

	admin.site.register(Person)

17.6 To clear "Recent Actions" panel in Django Admin:

	py manage.py shell

	from django.contrib.admin.models import LogEntry
	LogEntry.objects.all().delete()


18. Tests (myapp/tests.py):

	from django.test import TestCase
	from .models import Person
	
	class PersonModelTest(TestCase):
		...

To run the test:

	py manage.py test


19. Django REST workflow:

	model -> serializer -> view -> router


20. Security:

	py manage.py check --deploy

https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
https://dev.to/thepylot/django-web-security-checklist-before-deployment-secure-your-django-app-4jb8
https://stackoverflow.com/questions/52405589/how-to-check-django-security-vulnerabilities-and-how-to-fix-them


21. Deployement:

	py manage.py collectstatic

NOTE: Before each new deployment, the collectstatic command must be run to compile them into this staticfiles folder used in production.
